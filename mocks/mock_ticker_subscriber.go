// Code generated by MockGen. DO NOT EDIT.
// Source: ticker_subscriber.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/dimryb/cross-arb/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockTickerSubscriber is a mock of TickerSubscriber interface.
type MockTickerSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockTickerSubscriberMockRecorder
}

// MockTickerSubscriberMockRecorder is the mock recorder for MockTickerSubscriber.
type MockTickerSubscriberMockRecorder struct {
	mock *MockTickerSubscriber
}

// NewMockTickerSubscriber creates a new mock instance.
func NewMockTickerSubscriber(ctrl *gomock.Controller) *MockTickerSubscriber {
	mock := &MockTickerSubscriber{ctrl: ctrl}
	mock.recorder = &MockTickerSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickerSubscriber) EXPECT() *MockTickerSubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTickerSubscriber) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTickerSubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTickerSubscriber)(nil).Close))
}

// Done mocks base method.
func (m *MockTickerSubscriber) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockTickerSubscriberMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTickerSubscriber)(nil).Done))
}

// Recv mocks base method.
func (m *MockTickerSubscriber) Recv() (types.TickerEvent, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(types.TickerEvent)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTickerSubscriberMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTickerSubscriber)(nil).Recv))
}
